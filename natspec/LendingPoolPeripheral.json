{"notice": "The lending pool contract implements the lending pool logic. Each instance works with a corresponding loans contract to implement an isolated lending market.", "methods": {"depositWeth(uint256)": {"notice": "Deposits the given amount of WETH in the lending pool"}, "depositEth()": {"notice": "Deposits the sent amount in the lending pool"}, "withdrawWeth(uint256)": {"notice": "Withdrawals the given amount of WETH from the lending pool"}, "withdrawEth(uint256)": {"notice": "Withdrawals the given amount of ETH from the lending pool"}, "sendFundsWeth(address,uint256)": {"notice": "Sends funds in WETH to a borrower as part of a loan creation"}, "sendFundsEth(address,uint256)": {"notice": "Sends funds in ETH to a borrower as part of a loan creation"}, "receiveFundsEth(address,uint256,uint256)": {"notice": "Receive funds in ETH from a borrower as part of a loan payment"}, "receiveFundsWeth(address,uint256,uint256)": {"notice": "Receive funds in WETH from a borrower as part of a loan payment"}, "receiveFundsFromLiquidationWeth(address,uint256,uint256,bool,uint256,string)": {"notice": "Receive funds from a liquidation in WETH"}, "receiveFundsFromLiquidationEth(address,uint256,uint256,bool,uint256,string)": {"notice": "Receive funds from a liquidation in ETH"}}}
{"title": "LendingPoolPeripheral", "author": "[Zharta](https://zharta.io/)", "details": "Uses a `LendingPoolCore` contract to store state", "methods": {"depositWeth(uint256)": {"details": "Logs the `Deposit` event", "params": {"_amount": "Value to deposit in wei"}}, "depositEth()": {"details": "Logs the `Deposit` event"}, "withdrawWeth(uint256)": {"details": "Logs the `Withdrawal` and, if it changes the pools investing status, the `InvestingStatusChanged` events", "params": {"_amount": "Value to withdraw in wei"}}, "withdrawEth(uint256)": {"details": "Logs the `Withdrawal` and, if it changes the pools investing status, the `InvestingStatusChanged` events", "params": {"_amount": "Value to withdraw in wei"}}, "sendFundsWeth(address,uint256)": {"details": "Logs the `FundsTransfer` and, if it changes the pools investing status, the `InvestingStatusChanged` events", "params": {"_to": "The wallet address to transfer the funds to", "_amount": "Value to transfer in wei"}}, "sendFundsEth(address,uint256)": {"details": "Logs the `FundsTransfer` and, if it changes the pools investing status, the `InvestingStatusChanged` events", "params": {"_to": "The wallet address to transfer the funds to", "_amount": "Value to transfer in wei"}}, "receiveFundsEth(address,uint256,uint256)": {"details": "Logs the `FundsReceipt` and, if it changes the pools investing status, the `InvestingStatusChanged` events", "params": {"_borrower": "The wallet address to receive the funds from", "_amount": "Value of the loans principal to receive in wei", "_rewardsAmount": "Value of the loans interest (including the protocol fee share) to receive in wei"}}, "receiveFundsWeth(address,uint256,uint256)": {"details": "Logs the `FundsReceipt` and, if it changes the pools investing status, the `InvestingStatusChanged` events", "params": {"_borrower": "The wallet address to receive the funds from", "_amount": "Value of the loans principal to receive in wei", "_rewardsAmount": "Value of the loans interest (including the protocol fee share) to receive in wei"}}, "receiveFundsFromLiquidationWeth(address,uint256,uint256,bool,uint256,string)": {"details": "Logs the `FundsReceipt` and, if it changes the pools investing status, the `InvestingStatusChanged` events", "params": {"_borrower": "The wallet address to receive the funds from", "_amount": "Value of the loans principal to receive in wei", "_rewardsAmount": "Value of the rewards after liquidation (including the protocol fee share) to receive in wei", "_distributeToProtocol": "Wether to distribute the protocol fees or not", "_origin": "Identification of the liquidation method"}}, "receiveFundsFromLiquidationEth(address,uint256,uint256,bool,uint256,string)": {"details": "Logs the `FundsReceipt` and, if it changes the pools investing status, the `InvestingStatusChanged` events", "params": {"_borrower": "The wallet address to receive the funds from", "_amount": "Value of the loans principal to receive in wei", "_rewardsAmount": "Value of the rewards after liquidation (including the protocol fee share) to receive in wei", "_distributeToProtocol": "Wether to distribute the protocol fees or not", "_origin": "Identification of the liquidation method"}}}}
