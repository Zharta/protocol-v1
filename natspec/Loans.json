{"notice": "The loans contract exists as the main interface to create peer-to-pool NFT-backed loans", "methods": {"changeInterestAccrualPeriod(uint256)": {"notice": "Sets the interest accrual period, considered on loan payment calculations"}, "reserveWeth(uint256,uint256,uint256,(address,uint256,uint256)[],bool[],uint256,uint256,uint256,uint256,uint256)": {"notice": "Creates a new loan with the defined amount, interest rate and collateral. The message must be signed by the contract owner."}, "reserveEth(uint256,uint256,uint256,(address,uint256,uint256)[],bool[],uint256,uint256,uint256,uint256,uint256)": {"notice": "Creates a new loan with the defined amount, interest rate and collateral. The message must be signed by the contract owner."}, "pay(uint256)": {"notice": "Closes an active loan by paying the full amount"}, "settleDefault(address,uint256)": {"notice": "Settles an active loan as defaulted"}, "setDelegation(uint256,address,uint256,bool)": {"notice": "Sets / unsets a delegation for some collateral of a given loan. Only available to unpaid loans until maturity is reached"}}}
{"title": "Loans", "author": "[Zharta](https://zharta.io/)", "details": "Uses a `LoansCore` contract to store state", "methods": {"changeInterestAccrualPeriod(uint256)": {"details": "Logs `InterestAccrualPeriodChanged` event", "params": {"_value": "The interest accrual period in seconds"}}, "reserveWeth(uint256,uint256,uint256,(address,uint256,uint256)[],bool[],uint256,uint256,uint256,uint256,uint256)": {"details": "Logs `LoanCreated` event. The last 3 parameters must match a signature by the contract owner of the implicit message consisting of the remaining parameters, in order for the loan to be created", "params": {"_amount": "The loan amount in wei", "_interest": "The interest rate in bps (1/1000) for the loan duration", "_maturity": "The loan maturity in unix epoch format", "_collaterals": "The list of collaterals supporting the loan", "_delegations": "Wether to set the requesting wallet as a delegate for each collateral", "_deadline": "The deadline of validity for the signed message in unix epoch format", "_v": "recovery id for public key recover", "_r": "r value in ECDSA signature", "_s": "s value in ECDSA signature"}, "returns": {"_0": "The loan id"}}, "reserveEth(uint256,uint256,uint256,(address,uint256,uint256)[],bool[],uint256,uint256,uint256,uint256,uint256)": {"details": "Logs `LoanCreated` event. The last 3 parameters must match a signature by the contract owner of the implicit message consisting of the remaining parameters, in order for the loan to be created", "params": {"_amount": "The loan amount in wei", "_interest": "The interest rate in bps (1/1000) for the loan duration", "_maturity": "The loan maturity in unix epoch format", "_collaterals": "The list of collaterals supporting the loan", "_delegations": "Wether to set the requesting wallet as a delegate for each collateral", "_deadline": "The deadline of validity for the signed message in unix epoch format", "_v": "recovery id for public key recover", "_r": "r value in ECDSA signature", "_s": "s value in ECDSA signature"}, "returns": {"_0": "The loan id"}}, "pay(uint256)": {"details": "Logs the `LoanPayment` and `LoanPaid` events. The associated `LendingPoolCore` contract must be approved for the payment amount", "params": {"_loanId": "The id of the loan to settle"}}, "settleDefault(address,uint256)": {"details": "Logs the `LoanDefaulted` event, removes the collaterals from the loan and creates a liquidation", "params": {"_borrower": "The wallet address of the borrower", "_loanId": "The id of the loan to settle"}}, "setDelegation(uint256,address,uint256,bool)": {"params": {"_loanId": "The id of the loan to settle", "_collateralAddress": "The contract address of the collateral", "_tokenId": "The token id of the collateral", "_value": "Wether to set or unset the token delegation"}}}}
