{"notice": "The loans contract exists as the main interface to create peer-to-pool NFT-backed loans", "methods": {"changeMaxAllowedLoans(uint256)": {"notice": "Sets the max allowed loans value per borrower, validated againt active loans"}, "changeMaxAllowedLoanDuration(uint256)": {"notice": "Sets the max allowed loans duration per borrower, validated on loan creation"}, "changeMaxLoanAmount(uint256)": {"notice": "Sets the max loan amount per borrower, validated on loan creation"}, "changeInterestAccrualPeriod(uint256)": {"notice": "Sets the interest accrual period, considered on loan payment calculations"}, "addCollateralToWhitelist(address)": {"notice": "Adds a collection to the collateral whitelist, enabling it to be used in new loans"}, "removeCollateralFromWhitelist(address)": {"notice": "Removes a collection from the collateral whitelist, preventing it to be used in new loans"}, "changeWalletsWhitelistStatus(bool)": {"notice": "Sets the wallets whitelist control, considered on loan creation"}, "addWhitelistedWallet(address)": {"notice": "Adds a wallet to the wallets whitelist, enabling it to be used in new loans if the whitelist is enabled"}, "removeWhitelistedWallet(address)": {"notice": "Removes a wallet from the wallets whitelist, preventing it to be used in new loans if the whitelist is enabled"}, "reserveWeth(uint256,uint256,uint256,(address,uint256,uint256)[],uint256,uint256,uint256,uint256)": {"notice": "Creates a new loan with the defined amount, interest rate and collateral. The message must be signed by the contract owner."}, "reserveEth(uint256,uint256,uint256,(address,uint256,uint256)[],uint256,uint256,uint256,uint256)": {"notice": "Creates a new loan with the defined amount, interest rate and collateral. The message must be signed by the contract owner."}, "pay(uint256)": {"notice": "Closes an active loan by paying the full amount"}, "settleDefault(address,uint256)": {"notice": "Settles an active loan as defaulted"}}}
{"title": "Loans", "author": "[Zharta](https://zharta.io/)", "details": "Uses a `LoansCore` contract to store state", "methods": {"changeMaxAllowedLoans(uint256)": {"details": "Logs `MaxLoansChanged` event", "params": {"_value": "Sets the max allowed loans value in wei"}}, "changeMaxAllowedLoanDuration(uint256)": {"details": "Logs `MaxLoanDurationChanged` event", "params": {"_value": "Sets the max allowed loans value in seconds"}}, "changeMaxLoanAmount(uint256)": {"details": "Logs `MaxLoanAmountChanged` event", "params": {"_value": "Sets the max allowed loan amount in wei"}}, "changeInterestAccrualPeriod(uint256)": {"details": "Logs `InterestAccrualPeriodChanged` event", "params": {"_value": "The interest accrual period in seconds"}}, "addCollateralToWhitelist(address)": {"details": "Logs `CollateralToWhitelistAdded` event", "params": {"_address": "The colletion address to whitelist"}}, "removeCollateralFromWhitelist(address)": {"details": "Logs `CollateralToWhitelistRemoved` event", "params": {"_address": "The colletion address to remove from the whitelist"}}, "changeWalletsWhitelistStatus(bool)": {"details": "Logs `WalletsWhitelistStatusChanged` event", "params": {"_flag": "Enables / disables the wallets whitelist control"}}, "addWhitelistedWallet(address)": {"details": "Logs `CollateralToWhitelistAdded` event", "params": {"_address": "The colletion address to whitelist"}}, "removeWhitelistedWallet(address)": {"details": "Logs `CollateralToWhitelistRemoved` event", "params": {"_address": "The colletion address to remove from the whitelist"}}, "reserveWeth(uint256,uint256,uint256,(address,uint256,uint256)[],uint256,uint256,uint256,uint256)": {"details": "Logs `LoanCreated` event. The last 3 parameters must match a signature by the contract owner of the implicit message consisting of the remaining parameters, in order for the loan to be created", "params": {"_amount": "The loan amount in wei", "_interest": "The interest rate in bps (1/1000)", "_maturity": "The loan maturity in unix epoch format", "_collaterals": "The list of collaterals supporting the loan", "_deadline": "The deadline of validity for the signed message in unix epoch format", "_v": "recovery id for public key recover", "_r": "r value in ECDSA signature", "_s": "s value in ECDSA signature"}, "returns": {"_0": "The loan id"}}, "reserveEth(uint256,uint256,uint256,(address,uint256,uint256)[],uint256,uint256,uint256,uint256)": {"details": "Logs `LoanCreated` event. The last 3 parameters must match a signature by the contract owner of the implicit message consisting of the remaining parameters, in order for the loan to be created", "params": {"_amount": "The loan amount in wei", "_interest": "The interest rate in bps (1/1000)", "_maturity": "The loan maturity in unix epoch format", "_collaterals": "The list of collaterals supporting the loan", "_deadline": "The deadline of validity for the signed message in unix epoch format", "_v": "recovery id for public key recover", "_r": "r value in ECDSA signature", "_s": "s value in ECDSA signature"}, "returns": {"_0": "The loan id"}}, "pay(uint256)": {"details": "Logs the `LoanPayment` and `LoanPaid` events. The associated `LendingPoolCore` contract must be approved for the payment amount", "params": {"_loanId": "The id of the loan to settle"}}, "settleDefault(address,uint256)": {"details": "Logs the `LoanDefaulted` event, removes the collaterals from the loan and creates a liquidation", "params": {"_borrower": "The wallet address of the borrower", "_loanId": "The id of the loan to settle"}}}}
