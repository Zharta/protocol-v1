{"notice": "The lending pool contract implements the lending pool logic. Each instance works with a corresponding loans contract to implement an isolated lending market.", "methods": {"storeCollateral(address,address,uint256,address,bool)": {"notice": "Stores the given collateral"}, "transferCollateralFromLoan(address,address,uint256,address)": {"notice": "Transfers the given collateral from the vault to a wallet"}, "transferCollateralFromLiquidation(address,address,uint256)": {"notice": "Transfers the given collateral from the vault to a wallet, as part of a liquidation"}, "setCollateralDelegation(address,address,uint256,address,bool)": {"notice": "Creates or removes a token delegation for the given collateral"}, "collateralSupportsDelegation(address,uint256,address)": {"notice": "Returns wether a token delegation for the given collateral is supported"}}}
{"title": "CollateralVaultOTC", "author": "[Zharta](https://zharta.io/)", "details": "Uses a `CollateralVaultCore` to store ERC721 collaterals, and supports different vault cores (eg CryptoPunksVaultCore) as extension points for other protocols.", "methods": {"storeCollateral(address,address,uint256,address,bool)": {"details": "Logs the `CollateralStored` event", "params": {"_wallet": "The wallet to transfer the collateral from", "_collateralAddress": "The collateral contract address", "_tokenId": "The token id of the collateral", "_erc20TokenContract": "The token address by which the loans contract is indexed", "_createDelegation": "Wether to set _wallet as a delegate for the token"}}, "transferCollateralFromLoan(address,address,uint256,address)": {"details": "Logs the `CollateralFromLoanTransferred` event; to be used by `LoansPeripheral`", "params": {"_wallet": "The wallet to transfer the collateral to", "_collateralAddress": "The collateral contract address", "_tokenId": "The token id of the collateral", "_erc20TokenContract": "The token address by which the loans contract is indexed"}}, "transferCollateralFromLiquidation(address,address,uint256)": {"details": "Logs the `CollateralFromLiquidationTransferred` event; to be used by `LiquidationsPeripheral`", "params": {"_wallet": "The wallet to transfer the collateral to", "_collateralAddress": "The collateral contract address", "_tokenId": "The token id of the collateral"}}, "setCollateralDelegation(address,address,uint256,address,bool)": {"params": {"_wallet": "The wallet to delegate the collateral to", "_collateralAddress": "The collateral contract address", "_tokenId": "The token id of the collateral", "_erc20TokenContract": "The token address by which the loans contract is indexed", "_value": "Wether to set or unset the delegation"}}, "collateralSupportsDelegation(address,uint256,address)": {"params": {"_collateralAddress": "The collateral contract address", "_tokenId": "The token id of the collateral", "_erc20TokenContract": "The token address by which the loans contract is indexed"}}}}
